# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-ePaRf5T4lnkKamjk1nw0QEBpScuaZGI
"""

import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow import keras
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer

# !mkdir ~/.kaggle
# !cp kaggle.json ~/.kaggle/
# !chmod 600 ~/.kaggle/kaggle.json
# !kaggle datasets download -d  abdulqaderasiirii/e-commerce-data
# !unzip e-commerce-data.zip

df = pd.read_excel('E-commerce.xlsx')
df.head()

df['Order Date'] = pd.to_datetime(df['Order Date'])
df['Year'] = df['Order Date'].dt.year
df['Month'] = df['Order Date'].dt.month
df['Day'] = df['Order Date'].dt.day
df['Day_of_Week'] = df['Order Date'].dt.dayofweek

df.head()

df.drop(["Row ID", "Customer Name", "Segment", "Region", "Discount", "Profit", "Order Date"] ,
        axis=1, inplace=True)
df.head()

df_returns = pd.read_excel("E-commerce.xlsx", sheet_name="Returns")

df["Returned"] = df["Order ID"].isin(df_returns["Order ID"]).astype(int)

df_orders = df.drop_duplicates(subset=['Order ID'])

df.head()

categorical_features = ['Order ID', 'Ship Mode', 'Customer ID', 'Country', 'City', 'State', 'Product ID', 'Category', 'Sub-Category', 'Product Name']
numerical_features = ['Postal Code', 'Sales', 'Quantity', 'Year', 'Month', 'Day', 'Day_of_Week']

preprocessor = ColumnTransformer([
    ('num', StandardScaler(), numerical_features),
    ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
])

y = df['Returned']
X = df.drop(columns=['Returned'])

X = preprocessor.fit_transform(X)

x_train, x_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

model = keras.Sequential([
    keras.layers.Dense(64, activation='relu', input_shape=(X.shape[1],)),
    keras.layers.Dropout(0.2),
    keras.layers.Dense(32, activation='relu'),
    keras.layers.Dropout(0.3),
    keras.layers.Dense(16, activation='relu'),
    keras.layers.Dropout(0.2),
    keras.layers.Dense(1, activation='sigmoid')])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(x_train, y_train, epochs=5, batch_size=32, validation_data=(x_val, y_val))

loss, accuracy = model.evaluate(x_val, y_val)
print(f"Validation Loss: {loss:.4f}")
print(f"Validation Accuracy: {accuracy:.4f}")

df.query("Returned == 1")

new_order = pd.DataFrame({
    'Order ID': ["CA-2017-121258"],
    'Ship Mode': ['Standard Class'],
    'Customer ID': ['DB-13060'],
    'Country': ['United States'],
    'City': ['Costa Mesa'],
    'State': ['California'],
    'Postal Code': [92627],
    'Product ID': ['OFF-PA-10004041'],
    'Category': ['Office Supplies'],
    'Sub-Category': ['Paper'],
    'Product Name': ["It's Hot Message Books with Stickers, 2 3/4 x 5"],
    'Sales': [29.600],
    'Quantity': [4],
    'Year': [2020],
    'Month': [2],
    'Day': [26],
    'Day_of_Week': [1]
})

new_order = preprocessor.transform(new_order)

prediction = model.predict(new_order)
print(f"Return Probability: {prediction[0][0]:.5%}")

model.save("return_prediction_model_v2.keras")

import joblib

joblib.dump(preprocessor, 'return_prediction_preprocessor_v2.joblib')

